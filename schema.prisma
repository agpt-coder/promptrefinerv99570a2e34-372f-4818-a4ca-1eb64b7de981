// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  email          String   @unique
  hashedPassword String
  role           UserRole
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  prompts    Prompt[]
  feedbacks  Feedback[]
  accessLogs AccessLog[]
  rateLimits RateLimit[]
}

model Prompt {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  content        String
  refinedContent String?
  status         PromptStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  refinementLogs RefinementLog[]
  feedbacks      Feedback[]
}

model RefinementLog {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  promptId        String
  prompt          Prompt    @relation(fields: [promptId], references: [id], onDelete: Cascade)
  attempt         Int
  requestPayload  String
  responsePayload String
  status          LogStatus
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  rating    Int      @default(0)
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AccessLog {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  endpoint  String
  method    HttpMethod
  status    Int
  createdAt DateTime   @default(now())
}

model RateLimit {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestsMade Int      @default(0)
  period       DateTime
  limit        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  Admin
  User
  Guest
}

enum PromptStatus {
  Submitted
  Processing
  Completed
  Failed
}

enum LogStatus {
  Success
  Error
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

